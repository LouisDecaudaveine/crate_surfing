generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Track {
    track_id    String      @id 
    user_id     String
    name        String?     @default("Untitled")
    artist      String?
    album       String?
    kind        String?
    size        BigInt?
    total_time  Int?
    average_bpm Float?
    date_added  DateTime?
    sample_rate Int?
    play_count  Int?        @default(0)
    rating      Int?        @default(0)
    location    String?     
    tonality    String?
    playlists PlaylistTrack[]
}

model Playlist {
  playlist_id   String    @id @default(uuid())
  user_id       String  
  type          Int
  count         Int?      @default(0)
  path          String
  name          String
  track_ids     String[]  
  tracks  PlaylistTrack[]
}

model PlaylistTrack {
  playlist   Playlist @relation(fields: [playlistId], references: [playlist_id])
  playlistId String
  track      Track    @relation(fields: [trackId], references: [track_id])
  trackId    String

  @@id([playlistId, trackId])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  // Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

// // Optional for WebAuthn support
// model Authenticator {
//   credentialID         String  @unique
//   userId               String
//   providerAccountId    String
//   credentialPublicKey  String
//   counter              Int
//   credentialDeviceType String
//   credentialBackedUp   Boolean
//   transports           String?
 
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
//   @@id([userId, credentialID])
// }